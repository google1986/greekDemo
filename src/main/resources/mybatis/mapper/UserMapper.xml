<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!--namespace: 名称空间-->
<mapper namespace="com.htzw.study.mapper.UserMapper">
    <!--
    if:判断
    choose：（when，otherwise）：分支选择：带了break的switch-case
    trim：字符串截取（where：封装查询条件；set：封装修改条件）
    foreach：
    -->
    <resultMap id="BaseResultMap" type="com.htzw.study.entities.User">
        <id column="user_id" property="userId" jdbcType="INTEGER"/>
        <result column="user_name" property="userName" jdbcType="VARCHAR"/>
        <result column="true_name" property="trueName" jdbcType="VARCHAR"/>
        <result column="role_type" property="roleType" jdbcType="VARCHAR"/>
        <result column="org_id" property="orgId" jdbcType="INTEGER"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="update_date" property="updateDate" jdbcType="VARCHAR"/>
        <result column="remark" property="remark" jdbcType="VARCHAR"/>
    </resultMap>

    <resultMap id="UserPageResultMap" type="com.htzw.study.dto.UserDto">
        <id column="user_id" property="userId" jdbcType="INTEGER"/>
        <result column="user_name" property="userName" jdbcType="VARCHAR"/>
        <result column="true_name" property="trueName" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="org_id" property="orgId"/>
        <result column="org_name" property="orgName"/>
    </resultMap>
    <!--
    使用 association 进行分步查询+延迟加载（按需加载）
	    1  先按照用户id查询用户信息
	    2 根据查询用户信息中的org_id的值去部门表查出部门信息
	    3 部门设置到用户中
    -->
    <resultMap id="UserAssociationResultMap" type="com.htzw.study.entities.User">
        <id column="user_id" property="userId" jdbcType="INTEGER"/>
        <result column="user_name" property="userName" jdbcType="VARCHAR"/>
        <result column="true_name" property="trueName" jdbcType="VARCHAR"/>
        <result column="role_type" property="roleType" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="update_date" property="updateDate" jdbcType="VARCHAR"/>
        <result column="remark" property="remark" jdbcType="VARCHAR"/>
        <!-- association 定义管理对象的封装规则
           select: 表明当前属性是调用select 指定的方法
           column: 指定将哪一列的值传给这个方法
           流程 ： 使用select 指定的方法（传入column指定的这列参数的值）查出对象
           并封装给property 指定的属性
           -->
        <association property="org" column="org_id" select="com.htzw.study.mapper.OrganizationMapper.selectByPrimaryKey"/>
    </resultMap>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
delete from user
where user_id = #{userId,jdbcType=INTEGER}
</delete>
    <insert id="insert" useGeneratedKeys="true" keyProperty="userId" keyColumn="user_id"
            parameterType="com.htzw.study.entities.User">
insert into user (user_name, true_name,
  role_type, org_id, password,
  status, update_date, remark
  )
values (#{userName,jdbcType=VARCHAR}, #{trueName,jdbcType=VARCHAR},
  #{roleType,jdbcType=VARCHAR}, #{orgId,jdbcType=INTEGER}, #{password,jdbcType=VARCHAR},
  #{status,jdbcType=INTEGER}, #{updateDate,jdbcType=VARCHAR}, #{remark,jdbcType=VARCHAR}
  )
</insert>
    <update id="updateByPrimaryKey" parameterType="com.htzw.study.entities.User">
        update user
        <set>
            <if test="userName != null">
                user_name = #{userName},
            </if>
            <if test="trueName != null">
                true_name = #{trueName},
            </if>
            <if test="roleType != null">
                role_type = #{roleType},
            </if>
            <if test="orgId != null">
                org_id = #{orgId},
            </if>
            <if test="password != null">
                password = #{password},
            </if>
            <if test="status != null">
                status = #{status},
            </if>
            <if test="updateDate != null">
                update_date = #{updateDate},
            </if>
            <if test="remark != null">
                remark = #{remark},
            </if>
        </set>
        where user_id = #{userId,jdbcType=INTEGER}
    </update>
    <select id="selectByPrimaryKey" resultMap="UserAssociationResultMap" parameterType="java.lang.Integer">
select user_id, user_name, true_name, role_type, org_id, password, status, update_date,
remark
from user
where user_id = #{userId,jdbcType=INTEGER}
</select>
    <select id="selectAll" resultMap="BaseResultMap">
select user_id, user_name, true_name, role_type, org_id, password, status, update_date,
remark
from user
</select>
    <!--UserDto selectUserByUserNameAndPwd(@Param("userName") String userName, @Param("password") String password);-->
    <select id="selectUserByUserNameAndPwd" resultMap="UserPageResultMap">
        select u.user_id, u.user_name, u.true_name, u.password, o.org_id, o.org_name
        from user u ,org o WHERE u.org_id = o.org_id
        <!--
        <trim>:字符串截取标签
        prefix="":前缀：trim标签体中是整个字符串拼串后的结果
          prefix给拼串后的整个字符串加一个前缀
        prefixOverrides="":
          前缀覆盖：去掉整个字符串前面多余的字符
        suffix="":后缀
          suffix给拼串后的整个字符串加一个后缀
        suffixOverrides=""
          后缀覆盖：去掉整个字符串后面多余的字符
        -->
        <trim prefix="and" suffixOverrides="and">
            <if test="userName!=null &amp;&amp; userName != &quot;&quot;">
                user_name=#{userName} and
            </if>
            <if test="password!=null &amp;&amp; password != &quot;&quot;">
                password = #{password} and
            </if>
        </trim>
    </select>
</mapper>